swagger: '2.0'
info:
  version: '1.0'
  title: Kongapay SDK
  contact:
    name: Kongapay Support
    url: 'https://www.kongapay.com/'
    email: support@kongapay.com
  license:
    name: Kongapay
    url: 'https://www.kongapay.com/'
  termsOfService: 'https://www.kongapay.com/'
  x-logo:
    url: 'https://www.kongapay.com/img/logo@2x.png'
  description: |
    # Introduction
    The KongaPay Web Plugin is designed for use on the web.
    This plugin allow merchants to receive payments from a KongaPay user.
    This plugin will be implemented using HTML and Javascript.

    # Requirement
    Merchant must be signed up as a Merchant on KongaPay.
    Click (https://www.kongapay.com/merchant/register) to sign up.
    When you sign up for an account, you are given your API key (test).
    On meeting all requirement, (live) API key will be generated for you which can be view on our portal.

    # Authentication
    You authenticate to the
    KongaPay by providing your secret key (test or live public) and source in the request header.

    Never share your secret keys. Keep them guarded and secure.
    The client-side authentication scheme uses one HTTP header named Api-Key.

    # Note
    Test and Live environment is based on the key supplied. Key with *test_* signifies test environment and *live_* signifies live environment

    <!-- Kongapay-Inject: <security-definitions> -->

    *Sample Header*
    ```
    {
      "Api-Key": "<your public key>",
      "Source": "web_sdk"
    }
    ```

    # Implementation
    1. Add Javascript Link to the page
    On the page where the Merchant wants to receive payment the link to the Javascript file is to be added on the page.
    It is preferable to have it close to the javascript object.
    ```
     https://www.kongapay.com/plugins/web-plugin/js/v2/kongapay.min.js
    ```


host: api.kongapay.com
basePath: /
schemes:
  - https
x-servers:
  - url: //api.kongapay.com/
    description: Live Server
produces:
  - application/json
consumes:
  - application/json
securityDefinitions:
  ApiKey:
    description: |
      When you sign up for an account, you are given your API key.
      To do so please follow this link: https://www.kongapay.com/merchant/register
    name: Api-Key
    type: apiKey
    in: header
security:
  - ApiKey: []
responses:
  AccessForbidden:
    description: 'Access forbidden, invalid API-KEY was used'
    schema:
      $ref: '#/definitions/Error'
  NotFound:
    description: Resource was not found
    schema:
      $ref: '#/definitions/Error'
  Conflict:
    description: Conflict
    schema:
      $ref: '#/definitions/Error'
  InvalidDataError:
    description: Invalid data was sent
    schema:
      $ref: '#/definitions/InvalidError'
parameters:
  resourceId:
    name: id
    in: path
    description: The resource identifier string
    type: string
    required: true
  hash:
    name: hash
    in: path
    description: The token identifier string
    type: string
    required: true
paths:

  /web_sdk:
    post:
      tags:
        - Web SDK
      summary: KPG WEB SDK Documentation
      description: 'Hello World'
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          description: Configuration options for KPG web SDK
          required: true
          schema:
            type: object
            properties:
              amount:
                type: integer
                description: Transaction Amount always in kobo
              desc:
                type: string
                description: Reason for the payment
              hash:
                type: string
                description: This is an encrypted value, this value is generated using the amount from the merchant and public key supplied by KPG. format sha512(amount|public_key|reference)
              email:
                type: string
                format: email
                description: Email in which receipt for transaction would be sent
              merchantId:
                type: string
                description: This is a unique id provided by KPG
              merchant_reference:
                type: string
                description: Transaction reference, this has to be unique for every transaction to be initiated by KPG SDK else it would fail
              callback:
                type: string
                description: This should contain the url to redirect to or inline function to execute when returning a response, the callback response data contains the transaction status and merchantRef
              metadata:
                type: object
                description: This should contain an array of object about a transaction. check working example below to see format
              enableFrame:
                type: boolean
                description: This option is used by KPG SDK to load a frame or not
              selectedChannelIdentifier:
                type: string
                description: This the channel merchant is directed to on KPG
              phone:
                type: string
                description: Customers Phone Number
              firstname:
                type: string
                description: Customers First Name
              lastname:
                type: string
                description: Customers Last Name
              customerId:
                type: string
                description: customer Id. This could be email as well. This is needed to save and retrieve saved customer cards
            required:
              - amount
              - description
              - hash
              - merchantId
              - merchant_reference
              - callback
      responses:
        '200':
          description: Payment Successful
          schema:
            type: object
            properties:
              code:
                type: string
                enum:
                  - "00"
                description: test
              message:
                type: string
                enum:
                  - Payment Successful
              status:
                type: string
                enum:
                  - success
              merchant_refernce:
                type: string
        '100':
          description: Missing Parameters
          schema:
            type: object
            properties:
              code:
                type: string
                enum:
                  - "E00"
              message:
                type: string
                enum:
                  - Missing Parameters
              status:
                type: string
                enum:
                  - failed
              merchant_refernce:
                type: string
        '400':
          description: This returns server side error
          schema:
            type: object
            properties:
              code:
                type: string
                enum:
                  - "E01"
              message:
                type: string
                enum:
                  - This returns server side error
              status:
                type: string
                enum:
                  - failed
              merchant_refernce:
                type: string

definitions:
  ApiKey:
    type: object
    description: API secret Key.
    properties:
      id:
        readOnly: true
      description:
        description: API key description
        type: string
      datetimeFormat:
        description: Date time format
        type: string
        default: iso8601
        enum:
          - mysql
          - iso8601
  InvalidError:
    allOf:
      - $ref: '#/definitions/Error'
      - type: object
        properties:
          details:
            type: array
            items:
              type: string
  Error:
    type: object
    properties:
      status:
        type: integer
        minimum: 100
        maximum: 600
      error:
        type: string